#!/usr/bin/env bash
set -euo pipefail

THEMES_DIR="$HOME/.local/share/hypr/themes"
STATE_FILE="$HOME/.config/hypr/theme-current.json"
WOFI_STYLE="$HOME/.config/wofi/style.css"
HYPRPAPER_CONF="$HOME/.config/hypr/hyprpaper.conf"

need_deps() {
  if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq is required. Install: sudo pacman -S jq" >&2
    exit 1
  fi
  if ! command -v hyprpaper >/dev/null 2>&1; then
    echo "Error: hyprpaper is required. Install: sudo pacman -S hyprpaper" >&2
    exit 1
  fi
}

ensure_dirs() {
  mkdir -p "$THEMES_DIR"
}

cmd_list() {
  ensure_dirs
  local current=""
  if [[ -f "$STATE_FILE" ]]; then
    current=$(jq -r '.name' "$STATE_FILE" 2>/dev/null || true)
  fi
  for f in "$THEMES_DIR"/*.json; do
    [[ -e "$f" ]] || continue
    local name=$(jq -r '.name' "$f" 2>/dev/null || basename "$f" .json)
    if [[ "$name" == "$current" ]]; then
      echo "* $name (current)"
    else
      echo "  $name"
    fi
  done
}

apply_wofi() {
  local fg="$1" bg="$2" accent="$3" border="$4" sel="$5"
  cat > "$WOFI_STYLE" <<CSS
/* Generated by themectl */
@define-color bg ${bg};
@define-color fg ${fg};
@define-color muted #a6adc8;
@define-color accent ${accent};
@define-color border ${border};
@define-color sel ${sel};

window {
  font-family: "JetBrainsMono Nerd Font Propo", Inter, "Noto Sans", "JetBrainsMono Nerd Font", "Symbols Nerd Font", sans, sans-serif;
  font-size: 12px;
  background-color: @bg;
  color: @fg;
  border: 1px solid @border;
  border-radius: 10px;
}

#outer-box { margin: 2px; }

#input {
  margin: 4px 6px 6px 6px;
  padding: 4px 6px;
  border-radius: 8px;
  border: 1px solid @border;
  background-color: transparent;
  color: @fg;
  caret-color: @accent;
}

#inner-box { margin: 0; padding: 0 6px 6px 6px; }
#scroll { margin: 0; }

#entry {
  padding: 4px 6px;
  border-radius: 8px;
  color: @fg;
  border: 1px solid transparent;
}

#entry:selected {
  background-color: @sel;
  border-color: @accent;
}

#text { color: inherit; }
CSS
}

# Generate Hyprland colors file so borders match the theme
apply_hypr_colors() {
  local fg="$1" bg="$2" accent="$3" border="$4" active_alpha="${5:-}"
  local conf="$HOME/.config/hypr/colors.conf"

  mkdir -p "$(dirname "$conf")"

  # Convert hex like #89b4fa to r,g,b
  hex_to_rgb() {
    local hex="${1#\#}"
    printf '%d,%d,%d' "0x${hex:0:2}" "0x${hex:2:2}" "0x${hex:4:2}"
  }

  local accent_rgb
  if [[ "$accent" =~ ^#([A-Fa-f0-9]{6})$ ]]; then
    accent_rgb=$(hex_to_rgb "$accent")
  else
    # Fallback: try to parse rgba(r,g,b,a) and strip alpha
    accent_rgb=$(echo "$accent" | sed -E 's/rgba?\(([^,]+),\s*([^,]+),\s*([^,\)]+)(,.*)?\)/\1,\2,\3/' )
  fi

  # Subtle, theme-matched borders: active uses accent with configurable alpha; inactive uses theme border color
  if [[ -z "$active_alpha" ]]; then
    active_alpha="${HYPR_ACTIVE_BORDER_ALPHA:-0.45}"
  fi
  local active_rgba="rgba(${accent_rgb},${active_alpha})"

  cat > "$conf" <<CONF
# Generated by themectl â€” Hyprland border colors
general {
  col.active_border = ${active_rgba}
  col.inactive_border = ${border}
}
CONF
}

restart_hyprpaper() {
  # Restart hyprpaper to pick up new config
  if pgrep -x hyprpaper >/dev/null 2>&1; then
    pkill -x hyprpaper || true
    sleep 0.1
  fi
  nohup hyprpaper >/dev/null 2>&1 & disown || true
}

apply_wallpaper() {
  local wallpaper="$1"
  mkdir -p "$(dirname "$HYPRPAPER_CONF")"
  cat > "$HYPRPAPER_CONF" <<CONF
preload = ${wallpaper}
wallpaper = , ${wallpaper}
ipc = on
CONF
  restart_hyprpaper
}

cmd_apply() {
  ensure_dirs
  local name="$1"
  local theme_json="$THEMES_DIR/$name.json"
  if [[ ! -f "$theme_json" ]]; then
    echo "Theme not found: $name" >&2
    exit 1
  fi

  cp -f "$theme_json" "$STATE_FILE"

  local wallpaper fg bg accent border sel
  wallpaper=$(jq -r '.wallpaper' "$theme_json")
  fg=$(jq -r '.palette.fg' "$theme_json")
  bg=$(jq -r '.palette.bg' "$theme_json")
  accent=$(jq -r '.palette.accent' "$theme_json")
  border=$(jq -r '.palette.border' "$theme_json")
  sel=$(jq -r '.palette.sel' "$theme_json")

  apply_wofi "$fg" "$bg" "$accent" "$border" "$sel"

  # Optional: allow per-theme override for active border alpha
  local active_alpha
  active_alpha=$(jq -r '.palette.border_active_alpha // empty' "$theme_json") || active_alpha=""
  apply_hypr_colors "$fg" "$bg" "$accent" "$border" "$active_alpha"
  [[ -n "$wallpaper" && -f "$wallpaper" ]] && apply_wallpaper "$wallpaper"

  if pgrep -x waybar >/dev/null 2>&1; then pkill -SIGUSR2 waybar || true; fi
  if command -v hyprctl >/dev/null 2>&1; then hyprctl reload || true; fi
  echo "Applied theme: $name"
}

cmd_help() {
  cat <<'HLP'
Usage: themectl.sh <command> [args]

Commands:
  list                 List available themes
  apply <name>         Apply a theme

Notes:
  - Hyprpaper config is written to ~/.config/hypr/hyprpaper.conf.
  - Ensure hyprpaper is installed and autostarted by Hyprland.
HLP
}

main() {
  need_deps
  local cmd="${1:-help}"
  case "$cmd" in
    list)  cmd_list ;;
    apply) shift; [[ $# -ge 1 ]] || { echo "Missing theme name" >&2; exit 1; }; cmd_apply "$1" ;;
    *)     cmd_help ;;
  esac
}

main "$@"
